q()
install.packages("swirl")
q()
install.packages("paleobioDB", dep = T)
library(paleobioDB)
Taxon <- "Dinosauria"
MinMa <- 66
MaxMa <- 252
fossils <- pbdb_occurrence(base_name = Taxon, show = c ("phylo", "coords", "ident"), min_ma=MinMA, max_ma=MaxMA)
fossils <- pbdb_occurrences(base_name = Taxon, show = c("phylo", "coords", "ident"), min_ma=MinMA, max_ma=MaxMA)
MinMa <- 66
MaxMa <- 252
fossils <- pbdb_occurrences(base_name = Taxon, show = c("phylo", "coords", "ident"), min_ma=MinMA, max_ma=MaxMA)
install.packages("paleobioDB", dep = T)
library(paleobioDB)
Taxon <- "Dinosauria"
MinMa <- 66
MaxMa <- 252
fossils <- pbdb_occurrences(base_name = Taxon, show = c("phylo", "coords", "ident"), min_ma=MinMA, max_ma=MaxMA)
fossils <- pbdb_occurrences(base_name = Taxon, show = c("phylo", "coords", "ident"), min_ma=MinMa, max_ma=MaxMa)
Res <- 5
Taxon <- "Dinosauria"
#The min_ma and max_ma argumnts control the time_window that you are pulling fossils from in millions of years
MinMA <- 66
MaxMA <- 252
fossils <- pbdb_occurrences(base_name = Taxon, show = c("phylo", "coords", "ident"), min_ma=MinMA, max_ma=MaxMA)
#Resoulution (Res) will define a time period of 5Ma
Res <- 5
nspeciesOverTime <- pbdb_richness(fossils, rank = "genus", temporal_extent = c(MaxMA, MinMA), res=Res)
plot(seq(to=MaxMA, from=MinMA, length.out=nrow(nspeciesOverTime)), nspeciesOverTime[,2], xlim=c(MaxMA, MinMA), type="1", xlab="age (millions of years ago)", ylab="num. of species", main = Taxon)
plot(seq(to=MaxMA, from=MinMA, length.out=nrow(nspeciesOverTime)), nspeciesOverTime[,2], xlim=c(MaxMA, MinMA), type="1", xlab="age(millions of years ago)", ylab="num. of species", main = Taxon)
par(mar=c(4,5,2,1), las=1, tck=-0.01, mgp=c(2.5,0.5,0))
plot(seq(to=MaxMA, from=MinMA, length.out=nrow(nspeciesOverTime)), nspeciesOverTime[,2], xlim=c(MaxMA, MinMA), type="1", xlab="age(millions of years ago)", ylab="num. of species", main = Taxon)
par(mar=c(4,5,2,1), las=1, tck=-0.01, mgp=c(2.5,0.5,0))
plot(seq(to=MaxMA, from=MinMA, length.out=nrow(nspeciesOverTime)), nspeciesOverTime[,2], xlim=c(MaxMA, MinMA), type="1", xlab="age(millions of years ago)", ylab="num. of species", main = Taxon)
plot(seq(to=MaxMA, from=MinMA, length.out=nrow(nspeciesOverTime)), nspeciesOverTime[,2], xlim=c(MaxMA, MinMA), type='1', xlab="age(millions of years ago)", ylab="num. of species", main = Taxon)
plot(seq(to=MaxMA, from=MinMA, length.out=nrow(nspeciesOverTime)), nspeciesOverTime[,2], xlim=c(MaxMA, MinMA), type='1', xlab="age (millions of years ago)", ylab="num. of species", main = Taxon)
plot(seq(to=MaxMA, from=MinMA, length.out=nrow(nspeciesOverTime)), nspeciesOverTime[,1], xlim=c(MaxMA, MinMA), type="1", xlab="age (millions of years ago)", ylab="num. of species", main = Taxon)
plot(seq(to=MaxMA, from=MinMA, length.out=nrow(nspeciesOverTime)),
nspeciesOverTime[,2], xlim=c(MaxMA, MinMA), type="1", xlab="age (
millions of years ago)", ylab="num. of species", main = Taxon)
plot(seq(to=MaxMA, from=MinMA, length.out=nrow(nspeciesOverTime)), nspeciesOverTime[,2], xlim=c(MaxMA, MinMA), type="l", xlab="age (millions of years ago)", ylab="num. of species", main = Taxon)
newspeciesOverTime <- pbdb_orig_ext(fosils, res=5, rank="species", temporal_extent=c(minMA, MaxMA))
newspeciesOverTime <- pbdb_orig_ext(fossils, res=5, rank="species", temporal_extent=c(minMA, MaxMA))
newspeciesOverTime <- pbdb_orig_ext(fossils, res=5, rank="species", temporal_extent=c(MinMA, MaxMA))
par(mar=c(4,5,2,1), las=1, tck=-0.01, mgp=c(2.5,0.5,0))
plot(seq(to=MaxMA, from=MinMA, length.out=nrow(newspeciesOverTime)), newspeciesOverTime[,1], xlim=c(MaxMA, MinMA), type="l", xlab="age (millions of years ago)", ylab="num. of species", main = Taxon)
lines(seq(to=MaxMA, from=MinMA, length.out=nrow(newspeciesOverTime)), newspeciesOverTime[,2], col='red')
legend("topleft", legend=c("first appear", "go extinct"), col=c('black', 'red'), lty=1, bty="n")
OceanCol <- "light blue"
LandCol <- "black"
Cols <- c('#636363','#1c9099','#fb6a4a','#a50fl5','#dd1c77')
par(las=0)
pbdb_map_richness(fossils, col.ocean=OceanCol, col.int = LandCol, col.rich=Cols)
MinMA <- 201
MaxMA <- 252
triassic_fossils <- pbdb_occurrences(base_name = Taxon, show = c("phylo", "coords", "ident"), min_ma=MinMA, max_ma=MaxMA)
MinMa <- 145
MaxMA <- 201
jurassic_fossils <- pbdb_occurrences(base_name = Taxon, show = c("phylo", "coords", "ident"), min_ma=MinMA, max_ma=MaxMA)
MinMa <- 145
MaxMA <- 201
jurassic_fossils <- pbdb_occurrences(base_name = Taxon, show = c("phylo", "coords", "ident"), min_ma=MinMA, max_ma=MaxMA)
Taxon <- "Dinosauria"
MinMA <- 66
MaxMA <- 252
fossils <- pbdb_occurrences(base_name = Taxon, show = c("phylo", "coords", "ident"), min_ma=MinMA, max_ma=MaxMA)
install.packages("paleobioDB", dep = T)
library(paleobioDB)
install.packages("paleobioDB", dep = T)
install.packages("paleobioDB", dep = T)
install.packages("paleobioDB", dep = T)
library(paleobioDB)
Taxon <- "Dinosauria"
MinMA <- 66
MaxMA <- 252
fossils <- pbdb_occurrences(base_name = Taxon, show = c("phylo", "coords", "ident"), min_ma=MinMA, max_ma=MaxMA)
Res <- 5
nspeciesOverTime <- pbdb_richness(fossils, rank = "genus", temporal_extent = c(MaxMA, MinMA), res=Res)
par(mar=c(4,5,2,1), las=1, tck=-0.01, mgp=c(2.5,0.5,0))
plot(seq(to=MaxMA, from=MinMA, length.out=nrow(nspeciesOverTime)), nspeciesOverTime[,2], xlim=c(MaxMA, MinMA), type="l", xlab="age (millions of years ago)", ylab="num. of species", main = Taxon)
newspeciesOverTime <- pbdb_orig_ext(fossils, res=5, rank="species", temporal_extent=c(MinMA, MaxMA))
par(mar=c(4,5,2,1), las=1, tck=-0.01, mgp=c(2.5,0.5,0))
plot(seq(to=MaxMA, from=MinMA, length.out=nrow(newspeciesOverTime)), newspeciesOverTime[,1], xlim=c(MaxMA, MinMA), type="l", xlab="age (millions of years ago)", ylab="num. of species", main = Taxon)
lines(seq(to=MaxMA, from=MinMA, length.out=nrow(newspeciesOverTime)), newspeciesOverTime[,2], col='red')
legend("topleft", legend=c("first appear", "go extinct"), col=c('black', 'red'), lty=1, bty="n")
OceanCol <- "light blue"
LandCol <- "black"
Cols <- c('#636363','#1c9099','#fb6a4a','#a50fl5','#dd1c77')
par(las=0)
pbdb_map_richness(fossils, col.ocean=OceanCol, col.int = LandCol, col.rich=Cols)
MinMA <- 201
MaxMA <- 252
triassic_fossils <- pbdb_occurrences(base_name = Taxon, show = c("phylo", "coords", "ident"), min_ma=MinMA, max_ma=MaxMA)
MinMa <- 145
MaxMA <- 201
jurassic_fossils <- pbdb_occurrences(base_name = Taxon, show = c("phylo", "coords", "ident"), min_ma=MinMA, max_ma=MaxMA)
MinMa <- 145
MaxMA <- 201.3
jurassic_fossils <- pbdb_occurrences(base_name = Taxon, show = c("phylo", "coords", "ident"), min_ma=MinMA, max_ma=MaxMA)
jurassic_fossils <- pbdb_occurrences(base_name = Taxon, show = c("phylo", "coords", "ident"), min_ma=MinMA, max_ma=MaxMA)
MinMa <- 145
MaxMA <- 201
jurassic_fossils <- pbdb_occurrences(base_name = Taxon, show = c("phylo", "coords", "ident"), min_ma=MinMA, max_ma=MaxMA)
write.csv(Data, "rawdata.csv", quote=F)
#length() is a funcation that, when applied to an object, tells you how many numbers are in it
length (Data)
#nrow() and ncol() are functions that tell you the number of rows and colums in an object
nrow(Data)
ncol(Data)
#colnames() will list the names of the colums
colnames(Data)
#Some columns have straightforward names (like "genus"), but others are werid.
#So what kind of data are in each column? the date, time, amount, event and caregiver.
#head() will let you look at the first six rows for all columns in the file
head(Data)
#We can use square brackets, [], to acess subsets of our object.
#Run the following lines one at a time. Then compare the output of the head () function above.
#What does each one show? They show how to collect certain colums and rows.
Data[1,]
Data[2,]
Data[1:3,]
Data[1:3, 4]
Data[1:5, 1:3]
#how would you find the data of the 257th observation? Data[257,]
#this is how to find which events are bottles
Feeds <- which(Data[,9] == "bottle")
#I will store the data into a new object called berenMilk
berenMilk <- Data[Feeds,]
#head() will let you look at the first six rows for all columns in the file
head(berenMilk)
#how many rows are there in this new object? 12
#how does each row represent? year, month, day, dotw, start hour, start minute, end hur, end minute, event, value, units, caregiver
#To subset the file using the column names
Feeds <- which(Data[,"event"] == "bottle")
#Another way to subset the file using column names with $
Feeds <- which(Data$event == "bottle")
#I tried both and got the same results
dayID <- apply(Data, 1, function(x) paste(x[1:3], collapse="-"))
dataID <- sapply(dayID, as.Date, format = "%Y-%m-%d", origin = "2019-04-18")
#To record how many days old the son is for each observation.
#He was born on April 18th and he was weighed on April 20th
#April 20th - April 18th should give his age as 2
Data$age <- dataID - dataID[which(Data$event == "birth")]
head(Data)
#make a copy of the object
beren2 <- Data
#I need to reorganize that object so it sorts by date
#order() function to age column will do that
#also, subset teh object (beren2) by that order
beren3 <- beren2[order(beren2$age),]
#save the file as a CSV that so I can read back into R
write.csv(beren3, "beren_new.csv", quote=F, row.names=FALSE)
# Task 02b
#Question 1: the first hypothesis was inappropiate becuase his weight was
#not calculated and the second hypothesis the amount he drinks can be
#before a nap making the total milk drank different from the nap time.
setwd("C:\\Users\\godfr\\OneDrive\\Desktop\\Evolution\\Tasks\\Task_02")
beren3 <- read.csv("beren_new.csv", stringsAsFactors = F)
Feeds <- which(beren3$event == "bottle")
#TO find out how much Beren eats at a sitting
avgMilk <- mean(beren3$value[Feeds])
#WHat are the units for this avgMilk? Oz
#Why did I use the "Value" column? Because it tells teh oz of milk drank.
#Yes [] is important for extracting specfic data from a vector
#tapply() function takes some data (for us the Value) and
#some treatment(for us age in days) and applies some other function to those data
avgFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], mean)
varFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], var)
totalFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], sum)
numFeeds <- tapply(beren3$value[Feeds], beren3$age[Feeds], length)
#The cor() function tell me teh correlation between two sets of numbers
#?cor is the cor help page
cor(beren3$value[Feeds], beren3$age[Feeds])
#cor.test() function will conduct test for type of correlation you pick
cor.test(beren3$value[Feeds], beren3$age[Feeds])
berenCor <- cor.test(beren3$value[Feeds], beren3$age[Feeds])
#summary() will tell me the p-value and other summaries
berenCor
#~ the function of
berenANOVA <- aov(beren3$value[Feeds] ~ beren3$caregiver[Feeds])
#use boxplot function to plot data
boxplot(beren3$value[Feeds] ~ beren3$caregiver[Feeds], xlab= "who gave the bottle", ylab = "amount of milk consumed (oz)")
#par() function to edit details about the plot
#?par is the help page for it
par(las=1, mar=c(5,5,1,1), mgp=c(2, 0.5, 0), tck=-0.01)
plot(as.numeric(names(totalFeed)), totalFeed, type="b", pch=16, xlab="age in days", ylab="ounces of milk")
#To add a horizontal line to indicate the average amount of milk consumed each day
abline(h=mean(totalFeed), lty=2, col='red')
#to save the graph as a PDF
pdf("r02b-totalMilkByDay.pdf", height = 4, width=4)
par(las=1, mar=c(5,5,1,1), mgp=c(2, 0.5, 0), tck=-0.01)
plot(as.numeric(names(totalFeed)), totalFeed, type="b", pch=16, xlab="age in days", ylab="ounces of milk")
abline(h=mean(totalFeed), lty=2, col='red')
dev.off()
#Question 2: the data is random showing no correlation
berenANOVA <- aov(beren3$value[Feeds] ~ beren3$caregiver[Feeds])
#use boxplot function to plot data
boxplot(beren3$value[Feeds] ~ beren3$caregiver[Feeds], xlab= "who gave the bottle", ylab = "amount of milk consumed (oz)")
berenttest <- t.test(beren3$value[Feeds] ~ beren3$caregiver[Feeds])
oz <- beren3$value[Feeds]
caregiver <- beren3caregiver[Feeds]
oz <- beren3$value[Feeds]
caregiver <- beren3$caregiver[Feeds]
berenttest <- t.test(oz ~ caregiver)
Nap <- which(beren3$event == "nap")
Starttime <- ((beren3$start_hour[Nap]) * 60) + (beren3$start_minute[Nap])
endtime <- ((beren3$end_hour[Nap]) * 60) + (beren3$end_minute[Nap])
durnap <- endtime - Starttime
berenANOVA <- aov(durnap ~ beren3$caregiver[Nap])
boxplot(durnap ~ beren3$caregiver[Nap], xlab= "who put beren to sleep", ylab = "Duration of nap")
install.packages("paleobioDB", dep = T)
install.packages("paleobioDB", dep = T)
library(paleobioDB)
Taxon <- "Dinosauria"
MinMA <- 66
MaxMA <- 252
fossils <- pbdb_occurrences(base_name = Taxon, show = c("phylo", "coords", "ident"), min_ma=MinMA, max_ma=MaxMA)
Res <- 5
nspeciesOverTime <- pbdb_richness(fossils, rank = "genus", temporal_extent = c(MaxMA, MinMA), res=Res)
par(mar=c(4,5,2,1), las=1, tck=-0.01, mgp=c(2.5,0.5,0))
#NOTE lower case l not 1
plot(seq(to=MaxMA, from=MinMA, length.out=nrow(nspeciesOverTime)), nspeciesOverTime[,2], xlim=c(MaxMA, MinMA), type="l", xlab="age (millions of years ago)", ylab="num. of species", main = Taxon)
newspeciesOverTime <- pbdb_orig_ext(fossils, res=5, rank="species", temporal_extent=c(MinMA, MaxMA))
par(mar=c(4,5,2,1), las=1, tck=-0.01, mgp=c(2.5,0.5,0))
plot(seq(to=MaxMA, from=MinMA, length.out=nrow(newspeciesOverTime)), newspeciesOverTime[,1], xlim=c(MaxMA, MinMA), type="l", xlab="age (millions of years ago)", ylab="num. of species", main = Taxon)
lines(seq(to=MaxMA, from=MinMA, length.out=nrow(newspeciesOverTime)), newspeciesOverTime[,2], col='red')
legend("topleft", legend=c("first appear", "go extinct"), col=c('black', 'red'), lty=1, bty="n")
OceanCol <- "light blue"
LandCol <- "black"
Cols <- c('#636363','#1c9099','#fb6a4a','#a50fl5','#dd1c77')
par(las=0)
pbdb_map_richness(fossils, col.ocean=OceanCol, col.int = LandCol, col.rich=Cols)
MinMA <- 201
MaxMA <- 252
triassic_fossils <- pbdb_occurrences(base_name = Taxon, show = c("phylo", "coords", "ident"), min_ma=MinMA, max_ma=MaxMA)
MinMa <- 145
MaxMA <- 201
jurassic_fossils <- pbdb_occurrences(base_name = Taxon, show = c("phylo", "coords", "ident"), min_ma=MinMA, max_ma=MaxMA)
Taxon
#Jurassic fossils
MinMa <- 145
MaxMA <- 201
jurassic_fossils <- pbdb_occurrences(base_name = Taxon, show = c("phylo", "coords", "ident"), min_ma=MinMA, max_ma=MaxMA)
library(paleobioDB)
#Must use scientific term for taxon
Taxon <- "Dinosauria"
#The min_ma and max_ma argumnts control the time_window that you are pulling fossils from in millions of years
MinMA <- 66
MaxMA <- 252
fossils <- pbdb_occurrences(base_name = Taxon, show = c("phylo", "coords", "ident"), min_ma=MinMA, max_ma=MaxMA)
fossils
#Resoulution (Res) will define a time period of 5Ma
Res <- 5
nspeciesOverTime <- pbdb_richness(fossils, rank = "genus", temporal_extent = c(MaxMA, MinMA), res=Res)
#Change the plot to this
par(mar=c(4,5,2,1), las=1, tck=-0.01, mgp=c(2.5,0.5,0))
#NOTE lower case l not 1
plot(seq(to=MaxMA, from=MinMA, length.out=nrow(nspeciesOverTime)), nspeciesOverTime[,2], xlim=c(MaxMA, MinMA), type="l", xlab="age (millions of years ago)", ylab="num. of species", main = Taxon)
#Get the appearance Data
newspeciesOverTime <- pbdb_orig_ext(fossils, res=5, rank="species", temporal_extent=c(MinMA, MaxMA))
#setup the plot
par(mar=c(4,5,2,1), las=1, tck=-0.01, mgp=c(2.5,0.5,0))
#plot the first appearances
plot(seq(to=MaxMA, from=MinMA, length.out=nrow(newspeciesOverTime)), newspeciesOverTime[,1], xlim=c(MaxMA, MinMA), type="l", xlab="age (millions of years ago)", ylab="num. of species", main = Taxon)
lines(seq(to=MaxMA, from=MinMA, length.out=nrow(newspeciesOverTime)), newspeciesOverTime[,2], col='red')
#to add a legend
legend("topleft", legend=c("first appear", "go extinct"), col=c('black', 'red'), lty=1, bty="n")
#set color for the ocenas and the land on the map
OceanCol <- "light blue"
LandCol <- "black"
Cols <- c('#636363','#1c9099','#fb6a4a','#a50fl5','#dd1c77')
#To make a map
par(las=0)
pbdb_map_richness(fossils, col.ocean=OceanCol, col.int = LandCol, col.rich=Cols)
#COOL
Cols <- "red"
pbdb_map_richness(fossils, col.ocean=OceanCol, col.int = LandCol, col.rich=Cols)
#Use timescale to look at where dinosaur fossils have been found for different periods
#For a Geological Timescale: https://www.geosociety.org/documents/gsa/timescale/timescl.pdf
#Get all the Triassic fossils
MinMA <- 201
MaxMA <- 252
triassic_fossils <- pbdb_occurrences(base_name = Taxon, show = c("phylo", "coords", "ident"), min_ma=MinMA, max_ma=MaxMA)
#Jurassic fossils
MinMa <- 145
MaxMA <- 201
jurassic_fossils <- pbdb_occurrences(base_name = Taxon, show = c("phylo", "coords", "ident"), min_ma=MinMA, max_ma=MaxMA)
MinMA
MaxMA
MinMA
#Jurassic fossils
MinMA <- 145
MaxMA <- 201
jurassic_fossils <- pbdb_occurrences(base_name = Taxon, show = c("phylo", "coords", "ident"), min_ma=MinMA, max_ma=MaxMA)
Taxon
MinMA
MaxMA
jurassic_fossils <- pbdb_occurrences(base_name = Taxon, show = c("phylo", "coords", "ident"), min_ma=MinMA, max_ma=MaxMA)
MinMA <- 66
MaxMA <- 145
cretaceous_fossils <- pbdb_occurrences(base_name = Taxon, show = c("phylo", "coords", "ident"), min_ma=MinMA, max_ma=MaxMA)
dev.new(height = 7.8, width = 13)
pbdb_map_richness(triassic_fossils, col.ocean=OceanCol, col.int = LandCol, col.rich=Cols)
mtext(side = 3, "Triassic (252 - 201Ma)", cex=3, line=-2)
dev.new(height = 7.8, width = 13)
pbdb_map_richness(jurassic_fossils, col.ocean=OceanCol, col.int = LandCol, col.rich=Cols)
mtext(side = 3, "Jurassic (201 - 145Ma)", cex=3, line=-2)
dev.new(height = 7.8, width = 13)
pbdb_map_richness(cretaceous_fossils, col.ocean=OceanCol, col.int = LandCol, col.rich=Cols)
mtext(side = 3, "Cretaceous (145 -66Ma)", cex=3, line=-2)
Taxon2 <- "Mammalia"
MinMA <- 66
MaxMA <- 252
fossils2 <- pbdb_occurrences(base_name = Taxon2, show = c("phylo", "coords", "ident"), min_ma=MinMA, max_ma=MaxMA)
nspeciesOverTime2 <- pbdb_richness(fossils2, rank = "genus", temporal_extent = c(MaxMA, MinMA), res=Res)
par(mar=c(4,5,2,1), las =1, tck=-0.01, mgp=c(2,5,0.5,0))
par(mar=c(4,5,2,1), las=1, tck=-0.01, mgp=c(2.5,0.5,0))
Col_dino <- Cols[length(Cols)]
Col_mammal <- Cols[1]
LineWidth <-2
plot(seq(to=MaxMA, from=MinMA, length.out=nrow(nspeciesOverTime)), nspeciesOverTime[,2], xlim=c(MaxMA, MinMA), type="l", xlab="age (millions of years ago)", ylab="num. of species", col=Col_dino, lwd=LineWidth)
lines(seq(to=MaxMA, from=MinMA, length.out=nrow(nspeciesOverTime2)), nspeciesOverTime2[,2], col = Col_mammal, lwd=LineWidth)
legend("topleft", legend=c(Taxon, Taxon2), col=c(Col_dino, Col_mammal), bty="n", lwd=LineWidth)
options(stringsAsFactors = F)
library(spocc)
library(riant)
install.packages("rinat")
install.packages("remotes")
install.packages("rinat")
options(stringsAsFactors = F)
library(spocc)
install.packages("rinat")
